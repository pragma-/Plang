#!/usr/bin/env perl

# example Plang interpreter start-up script

use warnings;
use strict;

# allow loading .pm modules from this script's directory
BEGIN {
    use File::Basename;
    my $home = -l __FILE__ ? dirname readlink __FILE__ : dirname __FILE__;
    unshift @INC, "$home";
}

use Data::Dumper;
use Plang::Interpreter;

print "This script reads from standard input.\n" and exit if @ARGV;

# debug tags from $DEBUG environment variable
my $debug = $ENV{DEBUG} // 0;
my @debug_tags = split /,/, $debug;

# Grammar rule: DumpToken ::= *
sub DumpToken {
    my ($parser) = @_;
    return $parser->next_token;
}

sub plang_dbg {
    my $plang = Plang::Interpreter->new(embedded => 0, debug => $debug);

    # if --dumptokens was specified on command-line, use the DumpToken rule
    # otherwise use the Program rule
    my $dumptokens = 0;
    if (grep { $_ eq '--dumptokens' } @ARGV) {
        # generates all the tokens as a flat list
        $plang->{parser}->clear_rules;
        $plang->{parser}->add_rule(\&DumpToken);
        $dumptokens = 1;
    }

    # iterate over lines of standard input
    my $input_iter = sub { <STDIN> };

    # iterate over tokens
    my $token_iter = $plang->{lexer}->tokens($input_iter);

    # parse the input into $result
    my $result = $plang->{parser}->parse($token_iter);

    # were there any parse errors? print them and exit
    $plang->handle_parse_errors;

    # dump the $result data structure
    if ($dumptokens or grep { $_ eq 'AST' } @debug_tags) {
        $Data::Dumper::Terse = 1;
        $Data::Dumper::Indent = 1;
        $Data::Dumper::Useqq = 1;

        print Dumper ($result), "\n";
    }

    # unless --dumptokens was specified on the command-line, interpret the AST
    # and exit with the return value.
    return 0 if $dumptokens;

    # validate the program
    my $errors = $plang->{validator}->validate($result);

    if ($errors) {
        print STDERR $errors->[1];
        exit 1;
    }

    # interpret the program
    return $plang->{interpreter}->run($result);
}

# our return value/exit code
my $ret = plang_dbg() // 0;

no warnings;
exit $ret;
