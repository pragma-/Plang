# closure test
fn counter {
  var i = 0  # counter variable
  fn ++i     # final statement returns anonymous function taking no arguments, with one statement body `++i`
}

# these contain their own copies of the anonymous function `++i` returned by counter()
var count1 = counter()
var count2 = counter()

# these should increment their own `i` that was in scope at the time `fn ++i` was returned by counter()
var result = $"{count1()} {count1()} {count1()} {count2()} {count1()} {count2()}";

test_eq(result, '1 2 3 1 4 2');

# another closure test
var x = "global"

fn outer {
  var x = "outer";
  fn inner { print(x); }
  inner();
}

var result2 = outer();

test_eq(result2, null);
test_stdout('outer\n');
