test_eq(typeof(1==1), 'Boolean')
test_eq(typeof("hi"), 'String')
test_eq(typeof(42),   'Integer')
test_eq(typeof(null), 'Null')

test_eq(typeof([1,2,3,4]), "[Integer]")

test_eq(typeof([["a","b"],["c","d"]]), "[[String]]")

test_eq(typeof({"a": 42, "b": 3.14, "c": "hi"}), '{"a": Integer, "b": Real, "c": String}')

test_eq(typeof(fn null), 'Function () -> Null')
test_eq(whatis(fn null), 'Function () -> Null')

fn f1(a: Number, b: String) -> Boolean
  true

test_eq(typeof(f1), 'Function (Number, String) -> Boolean')
test_eq(whatis(f1), 'Function (a: Number, b: String) -> Boolean')

fn f2(a: Integer = 10, b: Integer = 20)
  a + b

test_eq(typeof(f2), 'Function (Integer, Integer) -> Integer')
test_eq(whatis(f2), 'Function (a: Integer = 10, b: Integer = 20) -> Integer')

fn f3(a, b)
  a + b

test_eq(typeof(f3), "Function (Any, Any) -> Number")
test_eq(whatis(f3), "Function (a: Any, b: Any) -> Number")

fn f4(a, b)
  a ^^ b

test_eq(typeof(f4), "Function (Any, Any) -> String")
test_eq(whatis(f4), "Function (a: Any, b: Any) -> String")

fn f5(a, b)
  a > b

test_eq(typeof(f5), "Function (Any, Any) -> Boolean")
test_eq(whatis(f5), "Function (a: Any, b: Any) -> Boolean")

fn f6(x)
  !x

test_eq(typeof(f6), "Function (Any) -> Boolean")
test_eq(whatis(f6), "Function (x: Any) -> Boolean")

type Port = 80
var port : Port

test_eq(typeof(port), "Integer") # TODO: should be "Port aka Integer"
test_eq(port, 80)

type Thing : Port
var thing : Thing

test_eq(typeof(thing), "Integer") # TODO: should be "Thing aka Port aka Integer"
test_eq(thing, 80)

type Foo : Thing = 8080
var foo : Foo

test_eq(typeof(foo), "Integer") # TODO: should be "Foo aka Thing aka Port aka Integer"
test_eq(foo, 8080)
